/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        //也是用层序遍历的方法
        //vector<vector<int>> ans;
        if(root==NULL)
            return 0;
        queue<TreeNode*> node_que;
        node_que.push(root);
        int min_depth=1;
        //vector<int> vec_tmp;
        //vec_tmp.push_back(root->val);
        //ans.push_back(vec_tmp);
        
        while(!node_que.empty())//队列为空时停止循环
        {
            vector<TreeNode*> vec_node;
            //vec_tmp.clear();
            while(!node_que.empty())
            {
                TreeNode* tmp=node_que.front();
                node_que.pop();
                if(tmp->left)
                {
                    vec_node.push_back(tmp->left);
                    //vec_tmp.push_back(tmp->left->val);
                }
                if(tmp->right)
                {
                    vec_node.push_back(tmp->right);
                    //vec_tmp.push_back(tmp->right->val);
                }
                if(!tmp->left&&!tmp->right)
                    return min_depth;
            }
            min_depth++;
            //if(!vec_tmp.empty())
            //    ans.push_back(vec_tmp);
            for(int i=0;i<vec_node.size();i++)
                node_que.push(vec_node[i]);
            
        }
        return min_depth;

    }
};
